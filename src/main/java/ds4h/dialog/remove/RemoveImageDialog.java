package ds4h.dialog.remove;

import ds4h.image.model.ImageFile;
import ds4h.dialog.remove.event.ExitEvent;
import ds4h.dialog.remove.event.RemoveImageEvent;
import ij.IJ;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.text.MessageFormat;
import java.util.List;

public class RemoveImageDialog extends JDialog {
    private JPanel contentPane;
    private JButton btn_close;
    private JButton btn_delete;
    private JPanel pnl_buttons;
    private JPanel pnl_images;
    private JList<ImageFile> lst_images;
    DefaultListModel<ImageFile> model;

    public RemoveImageDialog(List<ImageFile> imageFiles, OnRemoveDialogEventListener listener) {
        $$$setupUI$$$();
        setContentPane(contentPane);
        this.setResizable(false);
        this.setTitle("Remove image");

        model = new DefaultListModel<>();
        imageFiles.forEach(model::addElement);

        lst_images = new JList<>(model);
        lst_images.setCellRenderer(new ImageFileRenderer());

        JScrollPane pane = new JScrollPane(lst_images);
        pnl_images.add(pane, BorderLayout.CENTER);

        this.setMinimumSize(new Dimension(600, 600));
        this.setMaximumSize(new Dimension(600, 600));
        this.setPreferredSize(new Dimension(600, 600));
        this.pack();
        this.getInsets().set(100, 100, 100, 100);

        this.btn_delete.addActionListener(e -> listener.onRemoveDialogEvent(new RemoveImageEvent(lst_images.getSelectedIndex())));
        this.btn_close.addActionListener(e -> listener.onRemoveDialogEvent(new ExitEvent()));
    }


    public void removeImageFile(int index) {
        try {
            model.remove(index);
        } catch (Exception e) {
            IJ.showMessage(e.getMessage());
        }
        lst_images.updateUI();
        this.update(this.getGraphics());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout(0, 0));
        pnl_buttons = new JPanel();
        pnl_buttons.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        contentPane.add(pnl_buttons, BorderLayout.SOUTH);
        btn_delete = new JButton();
        btn_delete.setMaximumSize(new Dimension(100, 30));
        btn_delete.setMinimumSize(new Dimension(100, 30));
        btn_delete.setPreferredSize(new Dimension(100, 30));
        btn_delete.setText("Delete");
        pnl_buttons.add(btn_delete);
        btn_close = new JButton();
        btn_close.setMaximumSize(new Dimension(100, 30));
        btn_close.setMinimumSize(new Dimension(100, 30));
        btn_close.setPreferredSize(new Dimension(100, 30));
        btn_close.setText("Close");
        pnl_buttons.add(btn_close);
        pnl_images = new JPanel();
        pnl_images.setLayout(new BorderLayout(5, 5));
        contentPane.add(pnl_images, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    /**
     * Renderer custom di elementi JList: necessario per mostrare all'utente una serie di immagini
     */
    public static class ImageFileRenderer extends JPanel implements ListCellRenderer<ImageFile> {

        private JLabel lbl_caption = new JLabel();
        private JPanel pnl_images = new JPanel(new FlowLayout(FlowLayout.LEFT));
        private JPanel panelText;

        public ImageFileRenderer() {
            setLayout(new BorderLayout(5, 5));
            panelText = new JPanel(new GridLayout(0, 1));
            panelText.add(lbl_caption);
            add(pnl_images, BorderLayout.CENTER);
            add(panelText, BorderLayout.NORTH);

            Border border = panelText.getBorder();
            Border margin = new EmptyBorder(10, 10, 0, 0);
            panelText.setBorder(new CompoundBorder(border, margin));
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends ImageFile> list, ImageFile value, int index, boolean isSelected, boolean cellHasFocus) {

            lbl_caption.setText(MessageFormat.format("File {0}, {1}", index + 1, value.getPathFile()));
            lbl_caption.setFont(new Font(lbl_caption.getFont().getName(), lbl_caption.getFont().getStyle(), lbl_caption.getFont().getSize()));
            lbl_caption.setForeground(Color.DARK_GRAY);

            pnl_images.removeAll();
            value.getThumbs().forEach(thumb -> {
                JLabel lbl = new JLabel();
                Border border = lbl.getBorder();
                Border margin = new EmptyBorder(0, 10, 0, 0);
                lbl.setBorder(new CompoundBorder(border, margin));
                lbl.setIcon(new ImageIcon(thumb));
                pnl_images.add(lbl);
            });

            // when select item
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                lbl_caption.setBackground(list.getSelectionBackground());
                panelText.setBackground(list.getSelectionBackground());
                pnl_images.setBackground(list.getSelectionBackground());
            } else { // when don't select
                setBackground(list.getBackground());
                lbl_caption.setBackground(list.getBackground());
                panelText.setBackground(list.getBackground());
                pnl_images.setBackground(list.getBackground());
            }
            return this;
        }
    }
}
